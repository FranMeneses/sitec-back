# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input AddProjectMemberInput {
  projectId: String!
  roleId: Int!
  userId: String!
}

type Admin {
  id: String!
  idarea: Int
  iduser: String
}

type Area {
  admin: [Admin!]
  id: Int!
  name: String
}

input AssignSuperAdminInput {
  idUser: String!
}

type AuthResponse {
  accessToken: String!
  user: User!
}

type Category {
  areaId: Int
  createdAt: DateTime!
  description: String
  id: ID!
  name: String!
  updatedAt: DateTime!
}

type Comment {
  createdAt: DateTime!
  id: ID!
  task: Task
  taskId: String!
  text: String!
  updatedAt: DateTime!
  user: User
  userId: String!
}

input CreateAdminInput {
  idArea: Int!
  idUser: String!
}

input CreateAreaInput {
  name: String!
}

input CreateCategoryInput {
  areaId: Int!
  description: String
  name: String!
}

input CreateCommentInput {
  taskId: String!
  text: String!
}

input CreateEvidenceInput {
  link: String!
  taskId: String!
}

input CreateLogInput {
  processId: String
  projectId: String
  taskId: String
  type: String!
}

input CreateProcessInput {
  description: String
  dueDate: String
  name: String!
  projectId: String!
  startDate: String
}

input CreateProjectInput {
  categoryId: String
  description: String
  dueDate: String
  name: String!
  startDate: String
  unitId: Int
}

input CreateRoleInput {
  description: String
  name: String!
}

input CreateTaskInput {
  description: String
  dueDate: String
  memberAssignments: [TaskMemberAssignmentInput!]
  name: String!
  processId: String!
  startDate: String
  status: String!
}

input CreateTaskMemberInput {
  roleId: Int!
  taskId: String!
  userId: String!
}

input CreateTypeInput {
  name: String!
}

input CreateUnitInput {
  idtype: Int
  name: String!
}

input CreateUnitMemberInput {
  idrole: Int
  idunit: Int!
  iduser: String!
}

input CreateUserInput {
  email: String!
  havePassword: Boolean
  idArea: String
  idRole: String
  name: String!
  password: String
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Evidence {
  createdAt: DateTime!
  id: ID!
  link: String!
  task: Task
  taskId: String!
  updatedAt: DateTime!
  uploadedAt: DateTime!
  uploader: User
  uploaderId: String!
}

input LoginInput {
  email: String!
  password: String!
}

type Logs {
  createdAt: DateTime!
  creator: User
  creatorId: String!
  id: ID!
  process: Process
  processId: String
  project: Project
  projectId: String
  task: Task
  taskId: String
  type: String!
  updatedAt: DateTime!
}

type Mutation {
  addProjectMember(addProjectMemberInput: AddProjectMemberInput!): ProjectMember!
  addUnitMember(createUnitMemberInput: CreateUnitMemberInput!): UnitMember!
  assignProjectMemberAsUnitMember(addProjectMemberInput: AddProjectMemberInput!, projectId: String!): Boolean!
  assignSuperAdmin(assignSuperAdminInput: AssignSuperAdminInput!): String!
  assignTaskMember(createTaskMemberInput: CreateTaskMemberInput!): Boolean!
  createAdmin(createAdminInput: CreateAdminInput!): Admin!
  createArea(createAreaInput: CreateAreaInput!): Area!
  createCategoryAsUnitMember(createCategoryInput: CreateCategoryInput!): Category!
  createComment(createCommentInput: CreateCommentInput!): Comment!
  createEvidence(createEvidenceInput: CreateEvidenceInput!): Evidence!
  createFirstSuperAdmin(email: String!, name: String!, password: String!): AuthResponse!
  createLog(createLogInput: CreateLogInput!): Logs!
  createProcess(createProcessInput: CreateProcessInput!): Process!
  createProcessAsProjectMember(createProcessInput: CreateProcessInput!): Process!
  createProcessTask(idProcess: String!, idTask: String!): String!
  createProject(createProjectInput: CreateProjectInput!): Project!
  createProjectAsUnitMember(createProjectInput: CreateProjectInput!): Project!
  createProjectProcess(idProcess: String!, idProject: String!): String!
  createRole(createRoleInput: CreateRoleInput!): Role!
  createTask(createTaskInput: CreateTaskInput!): Task!
  createType(createTypeInput: CreateTypeInput!): Type!
  createUnit(createUnitInput: CreateUnitInput!): Unit!
  createUser(createUserInput: CreateUserInput!): User!
  deleteComment(id: String!): Boolean!
  deleteEvidence(id: String!): Boolean!
  deleteProcess(id: String!): Boolean!
  deleteProject(id: String!): Boolean!
  deleteRole(id: Int!): Boolean!
  deleteTask(id: String!): Boolean!
  login(loginInput: LoginInput!): AuthResponse!
  register(registerInput: RegisterInput!): AuthResponse!
  removeAdmin(id: String!): String!
  removeArea(id: Int!): Area!
  removeProcessTask(id: String!): String!
  removeProjectMember(projectId: String!, userId: String!): Boolean!
  removeProjectMemberAsUnitMember(projectId: String!, userId: String!): Boolean!
  removeProjectProcess(id: String!): String!
  removeTaskMember(taskId: String!, userId: String!): Boolean!
  removeType(id: Int!): Type!
  removeUnit(id: Int!): Unit!
  removeUnitMember(id: String!): UnitMember!
  removeUser(id: String!): User!
  removeUserSystemRole(userId: String!): SuccessResponse!
  updateArea(updateAreaInput: UpdateAreaInput!): Area!
  updateCategoryAsUnitMember(updateCategoryInput: UpdateCategoryInput!): Category!
  updateComment(updateCommentInput: UpdateCommentInput!): Comment!
  updateEvidence(updateEvidenceInput: UpdateEvidenceInput!): Evidence!
  updateProcess(updateProcessInput: UpdateProcessInput!): Process!
  updateProcessAsProjectMember(description: String, dueDate: String, name: String, processId: String!, startDate: String): Process!
  updateProfile(name: String): User!
  updateProject(updateProjectInput: UpdateProjectInput!): Project!
  updateProjectAsUnitMember(projectId: String!, updateProjectInput: UpdateProjectInput!): Project!
  updateProjectMember(updateProjectMemberInput: UpdateProjectMemberInput!): ProjectMember!
  updateRole(updateRoleInput: UpdateRoleInput!): Role!
  updateTask(updateTaskInput: UpdateTaskInput!): Task!
  updateTaskAsMember(updateTaskAsMemberInput: UpdateTaskAsMemberInput!): Task!
  updateUnit(updateUnitInput: UpdateUnitInput!): Unit!
  updateUnitMember(updateUnitMemberInput: UpdateUnitMemberInput!): UnitMember!
  updateUser(updateUserInput: UpdateUserInput!): User!
  updateUserSystemRole(roleId: Float!, userId: String!): SuccessResponse!
}

type Process {
  createdAt: DateTime!
  description: String
  dueDate: DateTime
  editedAt: DateTime
  editor: User
  id: ID!
  name: String!
  processTasks: [Task!]!
  project: Project
  projectId: String!
  startDate: DateTime
  updatedAt: DateTime!
}

type Project {
  categoryId: String
  createdAt: DateTime!
  description: String
  dueDate: DateTime
  editedAt: DateTime
  editor: User
  id: ID!
  name: String!
  startDate: DateTime
  unitId: Float
  updatedAt: DateTime!
}

type ProjectMember {
  assignedAt: DateTime
  id: ID!
  project: Project
  projectId: String!
  role: Role
  roleId: Int!
  user: User
  userId: String!
}

type Query {
  admin(id: String!): Admin!
  admins: [Admin!]!
  allCategoriesForAdmin: [Category!]!
  area(id: Int!): Area!
  areas: [Area!]!
  availableUsersForUnit(unitId: Int!): [User!]!
  checkSuperAdminExists: Boolean!
  commentById(id: String!): Comment
  comments: [Comment!]!
  commentsByTask(taskId: String!): [Comment!]!
  evidence: [Evidence!]!
  evidenceById(id: String!): Evidence
  evidenceByTask(taskId: String!): [Evidence!]!
  findAreaProjects(idArea: Float!): [Project!]!
  findByProcessId(idProcess: String!): [Task!]!
  findByTaskId(idTask: String!): [Task!]!
  findLogsByProcessId(idProcess: String!): [Logs!]!
  findLogsByProjectId(idProject: String!): [Logs!]!
  findLogsByTaskId(idTask: String!): [Logs!]!
  findUnitProjects(idUnit: Float!): [Project!]!
  findUserByEmail(email: String!): User!
  findUsersProject(idUser: String!): [Project!]!
  getAllCategoriesAsUnitMember: [Category!]!
  getAllSystemRoles: [SystemRoleResponse!]!
  getCategoryById(id: String!): Category
  getProjectProcessesAsMember(projectId: String!): [Process!]!
  getProjectsByCategory(categoryId: String!): [Project!]!
  getProjectsByUnit(unitId: Float!): [Project!]!
  getTaskMembers(taskId: String!): [TaskMember!]!
  getUnitProjectsAsMember(unitId: Float!): [Project!]!
  getUserSystemRole(userId: String!): SystemRoleResponse
  logs: [Logs!]!
  logsByProcess(processId: String!): [Logs!]!
  logsByProject(projectId: String!): [Logs!]!
  logsByTask(taskId: String!): [Logs!]!
  me: User!
  myAreaTypes: [Type!]!
  myAssignedTasks: [Task!]!
  myProjectMemberships: [ProjectMember!]!
  myRoles: [Role!]!
  myUnitMemberships: [UnitMember!]!
  process(id: String!): Process
  processes: [Process!]!
  processesByProject(projectId: String!): [Process!]!
  project(id: String!): Project
  projectMember(id: String!): ProjectMember!
  projectMembers(projectId: String!): [ProjectMember!]!
  projectProcessesByProcessId(idProcess: String!): [Process!]!
  projectProcessesByProjectId(idProject: String!): [Process!]!
  projects: [Project!]!
  role(id: Int!): Role
  roles: [Role!]!
  task(id: String!): Task
  tasks: [Task!]!
  tasksByProcess(processId: String!): [Task!]!
  tasksByProjectId(idProject: String!): [Task!]!
  type(id: Int!): Type!
  types: [Type!]!
  unit(id: Int!): Unit!
  unitMembers(unitId: Int!): [UnitMember!]!
  units: [Unit!]!
  user(id: String!): User!
  users: [User!]!
}

input RegisterInput {
  email: String!
  name: String!
  password: String!
}

type Role {
  createdAt: DateTime!
  description: String
  id: Int!
  name: String!
  updatedAt: DateTime!
}

type RoleInfo {
  id: Int!
  name: String!
}

type SuccessResponse {
  message: String!
  success: Boolean!
}

type SystemRole {
  createdAt: DateTime!
  id: ID!
  role: Role!
  roleId: Float!
  userId: String!
}

type SystemRoleResponse {
  email: String!
  id: String!
  isActive: Boolean!
  name: String!
  role: RoleInfo!
}

type Task {
  createdAt: DateTime!
  description: String
  dueDate: DateTime
  editedAt: DateTime
  editor: User
  id: ID!
  name: String!
  process: Process
  processId: String!
  report: String
  startDate: DateTime
  status: String!
  taskMembers: [TaskMember!]!
  updatedAt: DateTime!
}

type TaskMember {
  assignedAt: DateTime
  id: ID!
  role: Role
  roleId: Int!
  task: Task
  taskId: String!
  user: User
  userId: String!
}

input TaskMemberAssignmentInput {
  roleId: Int!
  userId: String!
}

type Type {
  id: Int!
  name: String!
}

type Unit {
  id: Int!
  idtype: Int
  name: String
  type: Type
  unit_member: [UnitMember!]
}

type UnitMember {
  id: String!
  idrole: Int
  idunit: Int
  iduser: String
}

input UpdateAreaInput {
  id: Int!
  name: String
}

input UpdateCategoryInput {
  areaId: Int
  description: String
  id: String!
  name: String
}

input UpdateCommentInput {
  id: String!
  text: String
}

input UpdateEvidenceInput {
  id: String!
  link: String
}

input UpdateProcessInput {
  description: String
  dueDate: String
  id: String!
  name: String
  startDate: String
}

input UpdateProjectInput {
  categoryId: String
  description: String
  dueDate: String
  id: String!
  name: String
  startDate: String
  unitId: Int
}

input UpdateProjectMemberInput {
  id: String!
  idRole: Int!
}

input UpdateRoleInput {
  description: String
  id: Int!
  name: String
}

input UpdateTaskAsMemberInput {
  id: String!
  report: String
  status: String
}

input UpdateTaskInput {
  description: String
  dueDate: String
  id: String!
  name: String
  report: String
  startDate: String
  status: String
}

input UpdateUnitInput {
  id: Int!
  idtype: Int
  name: String
}

input UpdateUnitMemberInput {
  id: String!
  idrole: Int
  idunit: Int
  iduser: String
}

input UpdateUserInput {
  email: String
  havePassword: Boolean
  id: String!
  idArea: String
  idRole: String
  isActive: Boolean
  name: String
  password: String
}

type User {
  createdAt: DateTime!
  email: String!
  havePassword: Boolean!
  id: ID!
  isActive: Boolean!
  name: String!
  password: String
  systemRole: SystemRole
  updatedAt: DateTime!
}