generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model admin {
  id     String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  idarea Int?
  iduser String? @db.Uuid
  area   area?   @relation(fields: [idarea], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user   user?   @relation(fields: [iduser], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model area {
  id       Int        @id @default(autoincrement())
  name     String?    @db.VarChar
  admin    admin[]
  category category[]
}

model evidence {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  idtask     String    @db.Uuid
  link       String
  iduploader String    @db.Uuid
  uploadedat DateTime? @default(now()) @db.Timestamp(6)
  review     String?
  task       task      @relation(fields: [idtask], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user       user      @relation(fields: [iduploader], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model logs {
  id        String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  type      String    @db.VarChar
  createdat DateTime? @default(now()) @db.Timestamp(6)
  idcreator String    @db.Uuid
  idproject String?   @db.Uuid
  idprocess String?   @db.Uuid
  idtask    String?   @db.Uuid
  user      user      @relation(fields: [idcreator], references: [id], onDelete: NoAction, onUpdate: NoAction)
  process   process?  @relation(fields: [idprocess], references: [id], onDelete: NoAction, onUpdate: NoAction)
  project   project?  @relation(fields: [idproject], references: [id], onDelete: NoAction, onUpdate: NoAction)
  task      task?     @relation(fields: [idtask], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model process {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String?   @db.VarChar
  description String?   @db.VarChar
  startdate   DateTime? @db.Timestamp(6)
  duedate     DateTime? @db.Timestamp(6)
  editedat    DateTime? @db.Timestamp(6)
  ideditor    String?   @db.Uuid
  idproject   String?   @db.Uuid
  review      String?
  logs        logs[]
  user        user?     @relation(fields: [ideditor], references: [id], onDelete: NoAction, onUpdate: NoAction)
  project     project?  @relation(fields: [idproject], references: [id], onDelete: NoAction, onUpdate: NoAction)
  task        task[]
}

model project {
  id             String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name           String?          @db.VarChar
  description    String?
  startdate      DateTime?        @db.Timestamp(6)
  duedate        DateTime?        @db.Timestamp(6)
  editedat       DateTime?        @db.Timestamp(6)
  ideditor       String?          @db.Uuid
  idunit         Int?
  idcategory     String?          @db.Uuid
  review         String?
  logs           logs[]
  process        process[]
  category       category?        @relation(fields: [idcategory], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_project_category")
  user           user?            @relation(fields: [ideditor], references: [id], onDelete: NoAction, onUpdate: NoAction)
  unit           unit?            @relation(fields: [idunit], references: [id], onDelete: NoAction, onUpdate: NoAction)
  project_member project_member[]
}

model project_member {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  idproject String?  @db.Uuid
  iduser    String?  @db.Uuid
  idrole    Int?
  project   project? @relation(fields: [idproject], references: [id], onDelete: NoAction, onUpdate: NoAction)
  role      role?    @relation(fields: [idrole], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user      user?    @relation(fields: [iduser], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model role {
  id             Int              @id @default(autoincrement())
  name           String?          @db.VarChar
  project_member project_member[]
  system_role    system_role[]
  task_member    task_member[]
  unit_member    unit_member[]
}

model task {
  id          String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String?       @db.VarChar
  description String?
  startdate   DateTime?     @db.Timestamp(6)
  duedateat   DateTime?     @db.Timestamp(6)
  status      String?       @db.VarChar
  editedat    DateTime?     @db.Timestamp(6)
  ideditor    String?       @db.Uuid
  idprocess   String        @db.Uuid
  report      String?
  budget      Int?
  expense     Int?
  review      String?
  comment     comment[]
  evidence    evidence[]
  logs        logs[]
  user        user?         @relation(fields: [ideditor], references: [id], onDelete: NoAction, onUpdate: NoAction)
  process     process       @relation(fields: [idprocess], references: [id], onDelete: NoAction, onUpdate: NoAction)
  task_member task_member[]
}

model type {
  id   Int    @id @default(autoincrement())
  name String @unique @db.VarChar
  unit unit[]
}

model unit {
  id          Int           @id @default(autoincrement())
  name        String?       @db.VarChar
  idtype      Int?
  project     project[]
  type        type?         @relation(fields: [idtype], references: [id], onDelete: NoAction, onUpdate: NoAction)
  unit_member unit_member[]
}

model unit_member {
  id     String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  iduser String? @db.Uuid
  idunit Int?
  idrole Int?
  role   role?   @relation(fields: [idrole], references: [id], onDelete: NoAction, onUpdate: NoAction)
  unit   unit?   @relation(fields: [idunit], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user   user?   @relation(fields: [iduser], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model user {
  id             String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name           String?          @db.VarChar
  email          String           @unique @db.VarChar
  password       String?          @db.VarChar
  isactive       Boolean?         @default(true)
  havepassword   Boolean?         @default(false)
  admin          admin[]
  comment        comment[]
  evidence       evidence[]
  logs           logs[]
  process        process[]
  project        project[]
  project_member project_member[]
  system_role    system_role?
  task           task[]
  task_member    task_member[]
  unit_member    unit_member[]
}

model category {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String    @db.VarChar
  description String?
  id_area     Int
  area        area      @relation(fields: [id_area], references: [id], onDelete: NoAction, onUpdate: NoAction)
  project     project[]
}

model comment {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  text       String
  created_at DateTime? @default(now()) @db.Timestamp(6)
  id_user    String    @db.Uuid
  id_task    String    @db.Uuid
  task       task      @relation(fields: [id_task], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user       user      @relation(fields: [id_user], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model task_member {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  idtask      String    @db.Uuid
  iduser      String    @db.Uuid
  idrole      Int
  assigned_at DateTime? @default(now()) @db.Timestamp(6)
  role        role      @relation(fields: [idrole], references: [id], onDelete: Cascade, onUpdate: NoAction)
  task        task      @relation(fields: [idtask], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user        user      @relation(fields: [iduser], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([idtask, iduser])
}

model system_role {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id    String    @unique @db.Uuid
  role_id    Int
  created_at DateTime? @default(now()) @db.Timestamp(6)
  role       role      @relation(fields: [role_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user       user      @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}
